[
  {
    "data-question": {
      "type": "give-input",
      "text": "1. Consider this finite state machine.<br>(a) The machine accepts the sequence '111'. Give two other sequences that it will accept.<br>(b) What do the sequences that this machine accepts have in common?<br>(c) When will this machine be in state <b>c</b>?",
      "allowEpsilon": "false",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 223,
            "y": 58,
            "isAcc": true,
            "isInit": true,
            "name": "a"
          },
          {
            "id": "B",
            "x": 273,
            "y": 144,
            "name": "b"
          },
          {
            "id": "C",
            "x": 323,
            "y": 58,
            "name": "c"
          }
        ],
        "links": [
          {
            "to": "B",
            "from": "A",
            "input": [
              "1"
            ]
          },
          {
            "to": "C",
            "from": "B",
            "input": [
              "1"
            ]
          },
          {
            "to": "A",
            "from": "C",
            "input": [
              "1"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "1"
          ],
          "allowEpsilon": false
        }
      }
    ],
    "data-options": {
      "hideProgressBar": true
    },
    "filename": "q1",
    "name": "Question 1",
    "id": "c236545d55e34a17a803c809bc711134"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "2. Like decimal numbers, binary numbers can be sorted into odd and even by looking at only the least significant digit. For example 12 = 1100 is even, 9 = 1001 is odd.<br>(a) Design a finite state machine over the alphabet {0,1} which accepts only those sequences that form an odd binary number.<br><table style=\"border-style: solid; border-collapse:collapse;border-spacing:0; border-width: thin; border-color: black\">  <tr style=\"border-width: thin;\">    <th style='border-style: solid; border-width:thin'>Input</th>    <th style='border-style: solid; border-width:thin'>Is Accepted?</th></tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>0</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>1</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">   <td style='border-style: solid; border-width:thin'>0001</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>1111</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>001010</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>110101</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>⟨⟩</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr></table>(b) For each input sequence in the table above, record whether the sequence is accepted or rejected by your machine.<br>(c) What changes would you make to your machine to make it recognise even numbers?<br>(d) What changes would you make to your machine to make it recognise the same sets for binary numbers presented in reverse order, with the least significant bit coming first?",
      "allowEpsilon": "false",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 100,
            "y": 125,
            "isInit": true,
            "name": "S1"
          },
          {
            "id": "B",
            "x": 202,
            "y": 125,
            "name": "S2"
          }
        ],
        "links": [],
        "attributes": {
          "alphabet": [
            "0",
            "1"
          ],
          "allowEpsilon": false
        }
      }
    ],
    "data-options": {
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q2",
    "name": "Question 2",
    "id": "8d1e4e25c3124208b8408ea708fcc291"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "3. This finite state machine could be used as part of a vending machine. It accepts any sequence of 20p coins that add up to 40p or more. <br>(a) How does this machine deal with input of more than 40p?<br>(b) Modify the machine to also allow 10p coins.",
      "allowEpsilon": "false",
      "splitSymbol": " ",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 107,
            "y": 93,
            "isInit": true,
            "name": "0p"
          },
          {
            "id": "B",
            "x": 207,
            "y": 93,
            "name": "20p"
          },
          {
            "id": "C",
            "x": 307,
            "y": 93,
            "isAcc": true,
            "name": "≥40p"
          }
        ],
        "links": [
          {
            "to": "B",
            "from": "A",
            "input": [
              "20p"
            ]
          },
          {
            "to": "C",
            "from": "B",
            "input": [
              "20p"
            ]
          },
          {
            "to": "C",
            "from": "C",
            "input": [
              "20p"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "10p",
            "20p"
          ],
          "allowEpsilon": false
        }
      }
    ],
    "data-options": {
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q3",
    "name": "Question 3",
    "id": "d3e5d4d010fb48eeab18049f0a2d153b"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "4. This FSM models the control logic of a chip & PIN card payment terminal. It represents a single transaction, ending in an accepting state if the transaction is successful.<br>(a) Note that the transaction will fail if the card is removed too early. Modify the machine so that the transaction will also fail if the wrong PIN is entered three times.<br>(b) This machine only verifies the PIN. Modify it to represent the process of checking with the bank for approval. The machine should only accept if the transaction is approved. The modified machine should take inputs 'Transaction Approved' and 'Transaction Rejected'.",
      "allowEpsilon": "false",
      "splitSymbol": " ",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 65,
            "y": 166,
            "isInit": true,
            "name": "S1"
          },
          {
            "id": "B",
            "x": 165,
            "y": 166,
            "name": "S2"
          },
          {
            "id": "C",
            "x": 265,
            "y": 166,
            "name": "S3"
          },
          {
            "id": "D",
            "x": 364,
            "y": 166,
            "name": "S4",
            "isAcc": true
          },
          {
            "id": "E",
            "x": 242,
            "y": 232,
            "name": "S5"
          }
        ],
        "links": [
          {
            "to": "B",
            "from": "A",
            "input": [
              "Insert Card"
            ]
          },
          {
            "to": "C",
            "from": "B",
            "input": [
              "Correct PIN"
            ]
          },
          {
            "to": "D",
            "from": "C",
            "input": [
              "Take Card"
            ]
          },
          {
            "to": "B",
            "from": "B",
            "input": [
              "Wrong PIN"
            ]
          },
          {
            "to": "E",
            "from": "B",
            "input": [
              "Take Card"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "Insert Card",
            "Take Card",
            "Correct PIN",
            "Wrong PIN",
            "Transaction Approved",
            "Transaction Rejected"
          ],
          "allowEpsilon": false
        }
      }
    ],
    "data-options": {
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q4",
    "name": "Question 4",
    "id": "6afcdfef16534013859b089a9356df5d"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "5. Consider a hot drinks machine. The machine takes 20p and 50p coins. It sells tea for 50p and coffee for 70p.<br>(a) Design a FSM that could be used to control this machine. After a successful sale the FSM should be in an accepting state. The machine only needs to model a single transaction.<br>(b) Consider your answer to part (a). How does the machine handle over-payment? Would it be possible to design a FSM that gives correct change?",
      "allowEpsilon": "false",
      "splitSymbol": " ",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 99,
            "y": 113,
            "isInit": true
          }
        ],
        "links": [],
        "attributes": {
          "alphabet": [
            "20p",
            "50p",
            "Tea",
            "Coffee"
          ],
          "allowEpsilon": false
        }
      }
    ],
    "data-options": {
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q5",
    "name": "Question 5",
    "id": "86f31a0a6d984d96b729ba6090245e74"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "6. The designer of this machine was attempting to create a system to accept strings with matching opening and closing brackets.<br>(a) Give a sequence of matching brackets that the machine does not accept.<br>(b) What does each state of the machine represent? That is, for each state what do the sequences that end in that state have in common? <br>(c) Is it possible to design a finite state machine that will accept all possible sequences of matching brackets? Justify your answer.<br>(d) For each state in the machine, there are input symbols which do not correspond to any transition. What do you think the machine should do if it received input that did not correspond to a transition?",
      "allowEpsilon": "false",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 112,
            "y": 79,
            "isAcc": true,
            "isInit": true,
            "name": "S1"
          },
          {
            "id": "B",
            "x": 212,
            "y": 79,
            "name": "S2"
          },
          {
            "id": "C",
            "x": 312,
            "y": 79,
            "name": "S3"
          },
          {
            "id": "D",
            "x": 112,
            "y": 179,
            "name": "S4"
          },
          {
            "id": "E",
            "x": 212,
            "y": 179,
            "name": "S5"
          }
        ],
        "links": [
          {
            "to": "B",
            "from": "A",
            "input": [
              "("
            ]
          },
          {
            "to": "A",
            "from": "B",
            "input": [
              ")"
            ]
          },
          {
            "to": "C",
            "from": "B",
            "input": [
              "("
            ]
          },
          {
            "to": "B",
            "from": "C",
            "input": [
              ")"
            ]
          },
          {
            "to": "D",
            "from": "A",
            "input": [
              "{"
            ]
          },
          {
            "to": "A",
            "from": "D",
            "input": [
              "}"
            ]
          },
          {
            "to": "E",
            "from": "D",
            "input": [
              "{"
            ]
          },
          {
            "to": "D",
            "from": "E",
            "input": [
              "}"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "(",
            "{",
            ")",
            "}"
          ],
          "allowEpsilon": false
        }
      }
    ],
    "data-options": {
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q6",
    "name": "Question 6",
    "id": "5f051aea464046369a42251ab2ad10bf"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "7. This is a variation on Question <a href='q2.html'>2</a>.<br>(a) Design a finite state machine over the alphabet {0,1} which accepts only those sequences that form a binary number divisible by 3?<br>For example your machine should accept 0, 000, 011, 11, 110, 1001, and 1100, which represent 0, 0, 3, 3, 6, and 12. <br>Hint: design a machine with three states S0, S1, S2, where the machine is in state S2 whenever n mod 3 = 2, i.e. where n, the number represented by the binary sequence seen, is 2 more than some multiple of 3.<br><br>(b) What changes would you make to your machine to make it recognise numbers not divisible by 3?<br><br>(c) What changes would you make to your machine to recognise the numbers divisible by 3 for binary numbers presented in reverse order, i. e. with the least significant bit coming first?",
      "allowEpsilon": "false",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 104,
            "y": 125,
            "isInit": true,
            "name": "S1"
          },
          {
            "id": "B",
            "x": 204,
            "y": 125,
            "name": "S2"
          },
          {
            "id": "C",
            "x": 304,
            "y": 125,
            "name": "S3"
          }
        ],
        "links": [],
        "attributes": {
          "alphabet": [
            "0",
            "1"
          ],
          "allowEpsilon": false
        }
      }
    ],
    "data-options": {
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q7",
    "name": "Question 7",
    "id": "6ce4da8e2ec545adb8fdc99f36f18e10"
  }
]