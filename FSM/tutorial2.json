[
  {
    "data-question": {
      "type": "give-input",
      "text": "Consider the finite state machine below.<br>(a) For each input sequence in the table, record whether it is accepted by the FSM.<br><table style=\"border-style: solid; border-collapse:collapse;border-spacing:0; border-width: thin; border-color: black\">  <tr style=\"border-width: thin;\">    <th style='border-style: solid; border-width:thin'>Input</th>    <th style='border-style: solid; border-width:thin'>Is Accepted?</th></tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>⟨⟩</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>b</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>aa</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>ba</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>abaab</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>acaca</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>aaab</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>aaab</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  <tr style=\"border-width: thin;\">    <td style='border-style: solid; border-width:thin'>cacba</td>    <td style='border-style: solid; border-width:thin; text-align: center'><input type='checkbox'></td>  </tr>  </table><br>(b) Is the FSM deterministic? Justify your answer.<br>",
      "allowEpsilon": "true",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 80,
            "y": 143,
            "isInit": true,
            "name": "S1"
          },
          {
            "id": "B",
            "x": 182,
            "y": 245,
            "isAcc": true,
            "isInit": true,
            "name": "S2"
          },
          {
            "id": "C",
            "x": 182,
            "y": 143,
            "name": "S3"
          },
          {
            "id": "D",
            "x": 266,
            "y": 190,
            "isAcc": true,
            "name": "S4"
          },
          {
            "id": "E",
            "x": 266,
            "y": 89,
            "name": "S5"
          }
        ],
        "links": [
          {
            "to": "C",
            "from": "A",
            "input": [
              "a",
              "c"
            ]
          },
          {
            "to": "B",
            "from": "C",
            "input": [
              "a"
            ]
          },
          {
            "to": "A",
            "from": "A",
            "input": [
              "b"
            ]
          },
          {
            "to": "D",
            "from": "C",
            "input": [
              "b"
            ]
          },
          {
            "to": "D",
            "from": "B",
            "input": [
              "b"
            ]
          },
          {
            "to": "E",
            "from": "C",
            "input": [
              "c"
            ]
          },
          {
            "to": "E",
            "from": "D",
            "input": [
              "a",
              "b",
              "c"
            ]
          },
          {
            "to": "E",
            "from": "E",
            "input": [
              "a",
              "b",
              "c"
            ]
          },
          {
            "to": "B",
            "from": "B",
            "input": [
              "a",
              "c"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "a",
            "b",
            "c"
          ],
          "allowEpsilon": true
        }
      }
    ],
    "data-options": {
      "showRegexTester": true,
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q1",
    "name": "Question 1",
    "id": "a72fd7312daf4ab1b9c10901c16f571e"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "2. This NFA over the alphabet {a} uses an ε transition.<br>(a) Describe the language accepted by this machine in words.<br>(b) Describe the language accepted by this machine using a regular expression.<br>(c) Design a deterministic machine that accepts the same language as this machine.",
      "allowEpsilon": "true",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 111,
            "y": 136,
            "isInit": true,
            "name": "S1"
          },
          {
            "id": "B",
            "x": 211,
            "y": 136,
            "name": "S2"
          },
          {
            "id": "C",
            "x": 311,
            "y": 136,
            "isAcc": true,
            "name": "S3"
          }
        ],
        "links": [
          {
            "to": "B",
            "from": "A",
            "input": [
              "a"
            ]
          },
          {
            "to": "C",
            "from": "B",
            "hasEps": true
          },
          {
            "to": "B",
            "from": "B",
            "input": [
              "a"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "a"
          ],
          "allowEpsilon": true
        }
      }
    ],
    "data-options": {
      "showRegexTester": true,
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q2",
    "name": "Question 2",
    "id": "9f6519c3c0004ecebd1f59ccb8d6cd8f"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "3. ε-transitions provide a simple way of combining FSMs. The machine below has been composed from two machines A and B, which had initial states A1 and B1.<br>(a) Considering machines A & B separately, give a regular expression which describes the language they accept.<br>(b) Considering the whole machine, give a regular expression which describes the language the machine accepts.<br>(c) L<sub>A</sub> and L<sub>B</sub> are the sets of inputs accepted by machines A and B. Give an expression relating L<sub>A</sub> and L<sub>B</sub> to L, where L is the set of input accepted by the whole machine.<br>",
      "allowEpsilon": "true",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 76,
            "y": 161,
            "isInit": true,
            "name": "S"
          },
          {
            "id": "B",
            "x": 156,
            "y": 101,
            "name": "A1"
          },
          {
            "id": "C",
            "x": 256,
            "y": 100,
            "name": "A2"
          },
          {
            "id": "D",
            "x": 356,
            "y": 100,
            "isAcc": true,
            "name": "A3"
          },
          {
            "id": "E",
            "x": 146,
            "y": 232,
            "name": "B1"
          },
          {
            "id": "F",
            "x": 230,
            "y": 176,
            "name": "B2"
          },
          {
            "id": "G",
            "x": 232,
            "y": 283,
            "name": "B3"
          },
          {
            "id": "H",
            "x": 315,
            "y": 228,
            "isAcc": true,
            "name": "B4"
          }
        ],
        "links": [
          {
            "to": "B",
            "from": "A",
            "hasEps": true
          },
          {
            "to": "C",
            "from": "B",
            "input": [
              "a"
            ]
          },
          {
            "to": "C",
            "from": "C",
            "input": [
              "b"
            ]
          },
          {
            "to": "D",
            "from": "C",
            "input": [
              "a"
            ]
          },
          {
            "to": "D",
            "from": "D",
            "input": [
              "a"
            ]
          },
          {
            "to": "E",
            "from": "A",
            "hasEps": true
          },
          {
            "to": "F",
            "from": "E",
            "input": [
              "b"
            ]
          },
          {
            "to": "E",
            "from": "F",
            "input": [
              "b"
            ]
          },
          {
            "to": "G",
            "from": "E",
            "input": [
              "a"
            ]
          },
          {
            "to": "E",
            "from": "G",
            "input": [
              "a"
            ]
          },
          {
            "to": "H",
            "from": "F",
            "input": [
              "a"
            ]
          },
          {
            "to": "H",
            "from": "G",
            "input": [
              "b"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "a",
            "b"
          ],
          "allowEpsilon": true
        }
      }
    ],
    "data-options": {
      "showRegexTester": true,
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q3",
    "name": "Question 3",
    "id": "4edc71b2600d4ecda0493230be107ccf"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "4. Consider the regular expression <tt>ab(a|b)*</tt><br>(a) Describe in words the language that the expression matches. Include two examples of strings that are matched.<br>(b) Design a finite state machine that accepts that language.<br>(c) Building on your answer to (b), design a finite state machine that accepts <tt>ab(a|b)*bb*(aa)*</tt>",
      "allowEpsilon": "true",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 100,
            "y": 125,
            "isInit": true,
            "name": "S1"
          }
        ],
        "links": [],
        "attributes": {
          "alphabet": [
            "a",
            "b"
          ],
          "allowEpsilon": true
        }
      }
    ],
    "data-options": {
      "showRegexTester": true,
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q4",
    "name": "Question 4",
    "id": "7910554ebd6548f5a1eeb134d97160df"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "5. Consider this NFA over the alphabet {a,b,c}.<br>(a) Describe, both in words and with a regular expression, the language accepted by this machine. Hint: think about the sequences<br>that end in A3 and B3.<br>(b) Design a DFA that accepts the same language.<br>(c) Are there any NFAs that cannot be converted into an equivalent DFA?",
      "allowEpsilon": "true",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 57,
            "y": 240,
            "isInit": true,
            "name": "B1"
          },
          {
            "id": "B",
            "x": 57,
            "y": 108,
            "isInit": true,
            "name": "A1"
          },
          {
            "id": "C",
            "x": 157,
            "y": 108,
            "name": "A2"
          },
          {
            "id": "D",
            "x": 257,
            "y": 108,
            "name": "A3"
          },
          {
            "id": "E",
            "x": 157,
            "y": 240,
            "name": "B2"
          },
          {
            "id": "F",
            "x": 257,
            "y": 240,
            "name": "B3"
          },
          {
            "id": "G",
            "x": 334,
            "y": 173,
            "name": "C1"
          },
          {
            "id": "H",
            "x": 434,
            "y": 173,
            "isAcc": true,
            "name": "C2"
          }
        ],
        "links": [
          {
            "to": "C",
            "from": "B",
            "input": [
              "c"
            ]
          },
          {
            "to": "D",
            "from": "C",
            "input": [
              "c"
            ]
          },
          {
            "to": "C",
            "from": "D",
            "input": [
              "c"
            ]
          },
          {
            "to": "G",
            "from": "D",
            "hasEps": true
          },
          {
            "to": "H",
            "from": "G",
            "input": [
              "a"
            ]
          },
          {
            "to": "G",
            "from": "F",
            "hasEps": true
          },
          {
            "to": "E",
            "from": "A",
            "input": [
              "b"
            ]
          },
          {
            "to": "F",
            "from": "E",
            "input": [
              "c"
            ]
          },
          {
            "to": "F",
            "from": "F",
            "input": [
              "c"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "a",
            "b",
            "c"
          ],
          "allowEpsilon": true
        }
      }
    ],
    "data-options": {
      "showRegexTester": true,
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q5",
    "name": "Question 5",
    "id": "5d2e7bb5239a41789ca011a559b56a05"
  },
  {
    "data-question": {
      "type": "give-input",
      "text": "Consider this DFA over the alphabet {0, 1, 2}. It should be familiar.<br>(a) Describe, in words, the language accepted by this machine. Hint: Your description in words should refer to ternary numbers.<br><br>(b) Replace each transition labelled 0 by a transition labelled ε, between the same two states. The resulting automaton is not a DFA. (Why not?)<br>i. Construct an equivalent DFA.<br>ii. Describe, both in words and with a regular expression, the language accepted by this machine.<br><br>(c) Next, replace each transition (of the original machine) labelled 1 by a transition labelled ε, between the same two states.<br>i. Again, construct an equivalent DFA, and describe the language it accepts.<br><br>(d) Repeat the exercise replacing each transition (of the original machine) labelled 2 by a transition labelled ε, between the same two states.<br>i. Construct an equivalent DFA, and describe the language it accepts.<br><br>(e) BONUS QUESTION: Give a regular expression that describes the language accepted by the original machine. Test your answer using the grep utility.",
      "allowEpsilon": "true",
      "splitSymbol": "",
      "target": "none",
      "outputSequence": []
    },
    "data-machinelist": [
      {
        "nodes": [
          {
            "id": "A",
            "x": 133,
            "y": 73,
            "isAcc": true,
            "isInit": true,
            "name": "s0"
          },
          {
            "id": "B",
            "x": 233,
            "y": 73,
            "name": "s2"
          },
          {
            "id": "C",
            "x": 133,
            "y": 173,
            "name": "s1"
          },
          {
            "id": "D",
            "x": 233,
            "y": 173,
            "name": "s3"
          }
        ],
        "links": [
          {
            "to": "A",
            "from": "A",
            "input": [
              "0"
            ]
          },
          {
            "to": "B",
            "from": "A",
            "input": [
              "2"
            ]
          },
          {
            "to": "A",
            "from": "B",
            "input": [
              "2"
            ]
          },
          {
            "to": "B",
            "from": "B",
            "input": [
              "0"
            ]
          },
          {
            "to": "C",
            "from": "A",
            "input": [
              "1"
            ]
          },
          {
            "to": "A",
            "from": "C",
            "input": [
              "1"
            ]
          },
          {
            "to": "C",
            "from": "C",
            "input": [
              "2"
            ]
          },
          {
            "to": "D",
            "from": "C",
            "input": [
              "0"
            ]
          },
          {
            "to": "C",
            "from": "D",
            "input": [
              "0"
            ]
          },
          {
            "to": "B",
            "from": "D",
            "input": [
              "1"
            ]
          },
          {
            "to": "D",
            "from": "B",
            "input": [
              "1"
            ]
          },
          {
            "to": "D",
            "from": "D",
            "input": [
              "2"
            ]
          }
        ],
        "attributes": {
          "alphabet": [
            "0",
            "1",
            "2"
          ],
          "allowEpsilon": true
        }
      }
    ],
    "data-options": {
      "showRegexTester": true,
      "forceEditable": true,
      "hideProgressBar": true,
      "showExport": true
    },
    "filename": "q6",
    "name": "Question 6",
    "id": "c1c54dcbc5ca4210a34702c1837b470f"
  }
]