[
  {
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"S0\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":2,\"px\":200,\"py\":250},{\"id\":1,\"accepting\":false,\"x\":495.08004747857865,\"y\":242.61165070055844,\"index\":1,\"weight\":1,\"px\":495.0797075098056,\"py\":242.61172433901885,\"fixed\":0,\"name\":\"S3\"},{\"id\":2,\"accepting\":false,\"x\":285.5008073963958,\"y\":126.42263479629631,\"index\":2,\"weight\":1,\"px\":285.5008073963958,\"py\":126.42263479629631,\"fixed\":0,\"name\":\"S1\"},{\"id\":3,\"accepting\":false,\"x\":348.2019309956355,\"y\":274.44626762895274,\"index\":3,\"weight\":2,\"px\":348.2021699859898,\"py\":274.4443991303302,\"fixed\":0,\"name\":\"S2\"}]",
    "data-links": "[{\"source\":0,\"target\":3,\"input\":[\"a\"],\"id\":1},{\"source\":0,\"target\":2,\"input\":[\"b\"],\"id\":2},{\"source\":3,\"target\":1,\"input\":[\"a\",\"b\"],\"id\":4}]",
    "filename": "select-states-1",
    "data-question": "{\"text\":\"When a Finite State Machine is given an input, it uses that input to chose which state to move to.<br>If the machine was in the initial state (S0) and was given the input ‘a’, which state would it move to?<br>Select that state and click ‘check’.\",\"alphabetType\":\"char\",\"type\":\"select-states\",\"initialState\":[0],\"nSteps\":1,\"input\":[\"a\"]}",
    "data-options": "{}"
  },
  {
    "filename": "select-states-2",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"S1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":1,\"px\":200,\"py\":250},{\"id\":9,\"accepting\":false,\"x\":238.76165563747406,\"y\":582.6076924391336,\"index\":1,\"weight\":0,\"px\":238.76165563747418,\"py\":582.6076924391332},{\"id\":21,\"accepting\":false,\"x\":349.9779944595717,\"y\":254.22959432942687,\"index\":2,\"weight\":3,\"px\":349.9779944595717,\"py\":254.22959432942687,\"fixed\":0,\"name\":\"S2\"},{\"id\":22,\"accepting\":false,\"x\":499.8943096430126,\"y\":247.41436413584552,\"index\":3,\"weight\":4,\"px\":499.8943096430126,\"py\":247.41436413584552,\"fixed\":0,\"name\":\"S3\"},{\"id\":23,\"accepting\":true,\"x\":430.82014215407577,\"y\":380.95156057225887,\"index\":4,\"weight\":2,\"px\":430.82014215407577,\"py\":380.95156057225887,\"fixed\":0,\"name\":\"S4\"}]",
    "data-links": "[{\"source\":0,\"target\":21,\"input\":[\"a\",\"b\"],\"id\":8},{\"source\":21,\"target\":22,\"input\":[\"b\"],\"id\":9},{\"source\":22,\"target\":23,\"input\":[\"a\"],\"id\":10},{\"source\":21,\"target\":23,\"input\":[\"a\"],\"id\":11},{\"source\":22,\"target\":22,\"input\":[\"b\"],\"id\":12}]",
    "data-question": "{\"type\":\"select-states\",\"text\":\"If the FSM was in state S2 and was given the input ‘a’, which state would it move to?<br> Select that state and click ‘check’.\",\"alphabetType\":\"char\",\"initialState\":[21],\"input\":[\"a\"],\"nSteps\":1}",
    "data-options": "{}"
  },
  {
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"S0\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":1,\"px\":200,\"py\":250},{\"id\":1,\"accepting\":false,\"x\":350.0753186396738,\"y\":248.5157282092216,\"index\":1,\"weight\":2,\"px\":350.07542624465594,\"py\":248.5158040903998,\"fixed\":0,\"name\":\"S1\"},{\"id\":2,\"accepting\":true,\"x\":500.15128247534426,\"y\":248.3727732935956,\"index\":2,\"weight\":1,\"px\":500.15128247534426,\"py\":248.3727732935956,\"fixed\":0,\"name\":\"S3\"}]",
    "data-links":"[{\"source\":0,\"target\":1,\"input\":[\"a\"],\"id\":1},{\"source\":1,\"target\":2,\"input\":[\"a\",\"b\"],\"id\":3}]",
    "filename": "select-states-3",
    "data-question": "{\"text\":\"If, starting from the initial state, an input sequence ends with the machine in an <b>accepting state</b>, the machine is said to <b>accept</b> that sequence.<br>Accepting states are shown using a double outline: <img src=\\\"accepting.png\\\" height=\\\"50\\\" width=\\\"50\\\" alt=\\\"An example image showing an accepting state composed of two= concentric circles.\\\" class=\\\"inline-q-img\\\">The machine below accepts the string \\\"ab\\\". Which state does it end in?\",\"alphabetType\":\"char\",\"type\":\"select-states\",\"initialState\":[0],\"nSteps\":2,\"input\":[\"a\",\"b\"]}",
    "data-options": "{}"
  },
  {
    "filename": "give-list-1",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":2,\"px\":200,\"py\":250},{\"id\":1,\"accepting\":true,\"name\":\"2\",\"x\":350.0006347292775,\"y\":251.08626712151133,\"index\":1,\"weight\":3,\"px\":350.00063633801693,\"py\":251.0860726484399,\"fixed\":0},{\"id\":2,\"accepting\":false,\"name\":\"3\",\"x\":500.0017709653978,\"y\":249.16851859051098,\"index\":2,\"weight\":1,\"px\":500.00203870477065,\"py\":249.16851516806275,\"fixed\":0}]",
    "data-links": "[{\"source\":0,\"target\":1,\"input\":[\"a\",\"b\"],\"id\":0},{\"source\":1,\"target\":2,\"input\":[\"a\",\"b\",\"c\"],\"id\":1},{\"source\":1,\"target\":0,\"input\":[\"a\"],\"id\":2}]",
    "data-question": "{\"type\":\"give-list\",\"lengths\":[3,3,5,7],\"text\":\"A finite state machine accepts a sequence if that sequence ends in an accepting state. In this example, state ‘2’  is an accepting state. <br>For each of the lengths given, give a sequence that the machine will accept. For example ‘aab’.\",\"alphabetType\":\"char\",\"prefill\":{\"0\":\"aab\"}}",
    "data-options": "{}"
  },
  {
    "filename": "give-list-2",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":3,\"px\":200,\"py\":250},{\"id\":1,\"accepting\":false,\"name\":\"2\",\"x\":350.15032120079667,\"y\":250.475260487718,\"index\":1,\"weight\":2,\"px\":350.1503209617719,\"py\":250.47526958470755,\"fixed\":0},{\"id\":2,\"accepting\":false,\"name\":\"3\",\"x\":500.3293871545822,\"y\":251.17886507380038,\"index\":2,\"weight\":2,\"px\":500.3293821052963,\"py\":251.17882771815624,\"fixed\":0},{\"id\":3,\"accepting\":true,\"x\":650.6004584943366,\"y\":250.95221832253597,\"index\":3,\"weight\":1,\"px\":650.5994361672165,\"py\":250.95221986159427,\"fixed\":0,\"name\":\"4\"},{\"id\":4,\"accepting\":false,\"x\":196.31303007981728,\"y\":99.89358118674825,\"index\":4,\"weight\":2,\"px\":196.31305489187685,\"py\":99.89459124923395,\"fixed\":0,\"name\":\"0\"}]",
    "data-links": "[{\"source\":0,\"target\":1,\"input\":[\"a\"],\"id\":0},{\"source\":1,\"target\":2,\"input\":[\"b\"],\"id\":1},{\"source\":2,\"target\":3,\"input\":[\"b\"],\"id\":3},{\"source\":0,\"target\":4,\"input\":[\"a\"],\"id\":4},{\"source\":4,\"target\":0,\"input\":[\"b\"],\"id\":5}]",
    "data-question": "{\"type\":\"give-list\",\"lengths\":[3,9],\"text\":\"For each of the lengths given, give a sequence that the Finite State Machine will accept.\",\"alphabetType\":\"char\"}",
    "data-options": "{}"
  },
  {
    "filename": "satisfy-list-1",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":1,\"px\":200,\"py\":250},{\"id\":21,\"accepting\":false,\"x\":350.36243015048876,\"y\":250.02945122848976,\"index\":2,\"weight\":1,\"px\":350.36243015048876,\"py\":250.02945122848976,\"fixed\":0,\"name\":\"2\"}]",
    "data-links": "[{\"source\":0,\"target\":21,\"input\":[\"a\"],\"id\":8},{\"source\":21,\"target\":21,\"input\":[\"b\"],\"id\":9}]",
    "data-question": "{\"type\":\"satisfy-list\",\"text\":\"Modify the FSM below to accept the strings on the left but reject the strings on the right.\",\"acceptList\":[\"aa\",\"aba\",\"abba\",\"aaa\",\"abaa\"],\"rejectList\":[\"\",\"a\",\"aaba\"],\"alphabetType\":\"char\"}",
    "data-options": "{}"
  },
  {
    "filename": "satisfy-list-2-vending-machine",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"0p\",\"x\":186,\"y\":346,\"fixed\":1,\"index\":0,\"weight\":2,\"px\":186,\"py\":346},{\"id\":21,\"accepting\":false,\"x\":336.57251690253736,\"y\":344.3356739411276,\"index\":1,\"weight\":4,\"px\":336.57113712737856,\"py\":344.3337945675871,\"fixed\":0,\"name\":\"20p\"},{\"id\":22,\"accepting\":false,\"x\":259.9058429355369,\"y\":214.98589706054923,\"index\":2,\"weight\":3,\"px\":259.9048953440994,\"py\":214.98691215802572,\"fixed\":0,\"name\":\"10p\"}]",
    "data-links": "[{\"source\":0,\"target\":21,\"input\":[\"20p\"],\"id\":8},{\"source\":0,\"target\":22,\"input\":[\"10p\"],\"id\":9},{\"source\":22,\"target\":21,\"input\":[\"10p\"],\"id\":10}]",
    "data-question": "{\"type\":\"satisfy-list\",\"text\":\"Design a FSM to represent the logic of a vending machine. It sells water for 40p and Irn-Bru for 50p. It accepts 10p and 20p coins.<br> The user is not required to enter exact money - eg if they enter 60p they should still be able to purchase water.\",\"acceptList\":[\"10p, 10p, 10p, 10p, 10p, Irn-Bru\",\"20p, 20p, Water\",\"10p 20p 20p, Irn-Bru\",\"20p, 20p, 20p, Water\",\"10p, 10p, 20p, 10p, Water\"],\"rejectList\":[\"\",\"10p, 10p, Water\",\"10p, 10p, 20p, Water, Water\"],\"alphabetType\":\"symbol\"}",
    "data-options": "{}"
  },
  {
    "filename": "satisfy-list-4-2010-resit",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":1,\"px\":200,\"py\":250},{\"id\":9,\"accepting\":false,\"x\":238.76165563769064,\"y\":582.6076924382673,\"index\":1,\"weight\":0,\"px\":238.76165563769075,\"py\":582.6076924382669},{\"id\":21,\"accepting\":false,\"x\":350.36243015048876,\"y\":250.02945122848976,\"index\":2,\"weight\":1,\"px\":350.36152344830526,\"py\":250.02945105089555,\"fixed\":0,\"name\":\"2\"}]",
    "data-links": "[{\"source\":0,\"target\":21,\"input\":[\"a\"],\"id\":8}]",
    "data-question": "{\"type\":\"satisfy-list\",\"text\":\"Construct a non-deterministic FSM that accepts the language described by the regular expression (a|bb)*(ba*|c)<br>(Based on question 5 from the 2010/11 resit paper)<br><b>Hint:</b> you can enter \\\"epsilon\\\" as a transition condition.\",\"acceptList\":[\"b\",\"c\",\"aba\",\"bbbbbbbaaaaaaaaaa\",\"aaaaaac\",\"baaaa\",\"baaa\",\"bbac\",\"abbabbabbabbbaa\",\"bbaabbbbaac\"],\"rejectList\":[\"bc\",\"bb\",\"bbbb\",\"abba\",\"acaa\"],\"alphabetType\":\"char\"}",
    "data-options": "{}"
  },
  {
    "filename": "satisfy-definition-1",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":0,\"px\":200,\"py\":250},{\"id\":3,\"accepting\":false,\"x\":278.872796531476,\"y\":389.8058114157804,\"index\":1,\"weight\":0,\"px\":278.8727965312796,\"py\":389.80581141543223,\"name\":\"2\",\"fixed\":0},{\"id\":4,\"accepting\":false,\"x\":416.3334072918634,\"y\":187.39953915600802,\"index\":2,\"weight\":0,\"px\":416.33340729186364,\"py\":187.39953915600813,\"name\":\"5\",\"fixed\":0},{\"id\":5,\"accepting\":false,\"x\":282.2880267249287,\"y\":100.03837252851466,\"index\":3,\"weight\":0,\"px\":282.28802672492895,\"py\":100.03837252851471,\"name\":\"3\"},{\"id\":6,\"accepting\":false,\"x\":555.4905167286834,\"y\":93.53840060613372,\"index\":4,\"weight\":0,\"px\":555.4905167286834,\"py\":93.53840060613372,\"name\":\"6\",\"fixed\":0},{\"id\":7,\"accepting\":false,\"x\":438.3812867431534,\"y\":352.4524380686589,\"index\":5,\"weight\":0,\"px\":438.3812867431544,\"py\":352.4524380686581,\"name\":\"4\",\"fixed\":0},{\"id\":8,\"accepting\":false,\"x\":565.92573715246,\"y\":253.3626628995069,\"index\":6,\"weight\":0,\"px\":565.92573715246,\"py\":253.3626628995069,\"name\":\"7\",\"fixed\":0},{\"id\":9,\"accepting\":false,\"x\":698.7707770242341,\"y\":342.8195983872329,\"index\":7,\"weight\":0,\"px\":698.7707770242337,\"py\":342.81959838723253,\"name\":\"8\",\"fixed\":0}]",
    "data-links": "[]",
    "data-question": "{\"type\":\"satisfy-definition\",\"alphabet\":[\"1\",\"2\"],\"accepting\":[\"8\"],\"initial\":\"1\",\"nodes\":[\"1\",\"2\",\"3\",\"5\",\"4\",\"6\",\"7\",\"8\"],\"links\":[{\"source\":\"1\",\"target\":\"2\",\"input\":\"1\"},{\"source\":\"1\",\"target\":\"4\",\"input\":\"1\"},{\"source\":\"2\",\"target\":\"2\",\"input\":\"2\"},{\"source\":\"2\",\"target\":\"3\",\"input\":\"2\"},{\"source\":\"3\",\"target\":\"3\",\"input\":\"1\"},{\"source\":\"3\",\"target\":\"8\",\"input\":\"ε\"},{\"source\":\"4\",\"target\":\"5\",\"input\":\"1\"},{\"source\":\"5\",\"target\":\"5\",\"input\":\"1\"},{\"source\":\"5\",\"target\":\"5\",\"input\":\"2\"},{\"source\":\"4\",\"target\":\"6\",\"input\":\"2\"},{\"source\":\"6\",\"target\":\"4\",\"input\":\"1\"},{\"source\":\"6\",\"target\":\"6\",\"input\":\"1\"},{\"source\":\"6\",\"target\":\"7\",\"input\":\"2\"},{\"source\":\"7\",\"target\":\"8\",\"input\":\"ε\"}],\"text\":\"<p>Draw the non-deterministic FSM described below.</p><p><em>M </em>: <em>M </em>= (<em>Q</em>,<em> </em>Σ,<em> s<sub>0</sub></em>,<em> F</em>,<em> </em>δ<em>)</em>, where</p><p><em>Q </em>= {1, 2, 3, 4, 5, 6, 7, 8}</p><p>Σ = {1, 2}</p><p><em>s</em><sub>0</sub> = {1}</p><p>F = {8} </p><p>δ = {(1, 1, 2), (1, 1, 4), (2, 2, 2), (2, 2, 3), (3, 1, 3), (3, ε, 8), (4, 1, 5), (5, 1, 5), (5, 2, 5), (4, 2, 6), (6, 1, 4), (6, 1, 6), (6, 2, 7), (7, ε, 8)}.</p><p>(Based on the 2013/14 resit exam paper.)</p>\",\"alphabetType\":\"char\"}",
    "data-options": "{}"
  },
  {
    "filename": "give-list-3-cabbage-goat-wolf",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"cgw|S\",\"x\":100,\"y\":285,\"fixed\":1,\"index\":0,\"weight\":4,\"px\":100,\"py\":285},{\"id\":3,\"accepting\":false,\"x\":195.97365191827012,\"y\":401.1981100841758,\"index\":1,\"weight\":2,\"px\":195.97304428626495,\"py\":401.19225489292546,\"fixed\":0,\"name\":\"w eats g\"},{\"id\":4,\"accepting\":false,\"x\":181.66768784122942,\"y\":158.48393017139554,\"index\":2,\"weight\":2,\"px\":181.68169419730904,\"py\":158.49910950187873,\"fixed\":0,\"name\":\"g eats c\"},{\"id\":6,\"accepting\":false,\"x\":250.09844616259082,\"y\":283.3597835768809,\"index\":3,\"weight\":4,\"px\":250.09157615101813,\"py\":283.36282010672505,\"fixed\":0,\"name\":\"cw|gN\"},{\"id\":7,\"accepting\":false,\"x\":399.5000590604942,\"y\":270.7841326297783,\"index\":4,\"weight\":6,\"px\":399.49884964524904,\"py\":270.79673722620663,\"fixed\":0,\"name\":\"cw|gS\"},{\"id\":8,\"accepting\":false,\"x\":346.2885365372471,\"y\":411.2326356509894,\"index\":5,\"weight\":5,\"px\":346.28458357501603,\"py\":411.23379634048104,\"fixed\":0,\"name\":\"c|gwN\"},{\"id\":9,\"accepting\":false,\"x\":330.67684756765766,\"y\":137.34213071908607,\"index\":6,\"weight\":5,\"px\":330.68815128419243,\"py\":137.35468840988074,\"fixed\":0,\"name\":\"w|cgN\"},{\"id\":10,\"accepting\":false,\"x\":495.8220379780826,\"y\":397.0943635797884,\"index\":7,\"weight\":5,\"px\":495.81284322865355,\"py\":397.1100307464268,\"fixed\":0,\"name\":\"cg|wS\"},{\"id\":11,\"accepting\":false,\"x\":480.7398738556817,\"y\":132.94611804189964,\"index\":8,\"weight\":5,\"px\":480.74988027175397,\"py\":132.96824433567994,\"fixed\":0,\"name\":\"gw|cS\"},{\"id\":12,\"accepting\":false,\"x\":559.1998046431698,\"y\":260.99977788038746,\"index\":9,\"weight\":6,\"px\":559.1976787728303,\"py\":261.02085370006876,\"fixed\":0,\"name\":\"g|cwN\"},{\"id\":13,\"accepting\":false,\"x\":627.7208160813066,\"y\":101.84031952566534,\"index\":10,\"weight\":1,\"px\":627.7199956213813,\"py\":101.84049435823698,\"fixed\":0,\"name\":\"w eats g\"},{\"id\":14,\"accepting\":false,\"x\":631.4914353905731,\"y\":461.5954619120893,\"index\":11,\"weight\":1,\"px\":631.4882701795785,\"py\":461.5939632906149,\"fixed\":0,\"name\":\"g e c\"},{\"id\":15,\"accepting\":false,\"x\":708.671273787911,\"y\":274.1856108771571,\"index\":12,\"weight\":3,\"px\":708.674484211977,\"py\":274.18115181148846,\"fixed\":0,\"name\":\"g|cwS\"},{\"id\":16,\"accepting\":true,\"x\":858.8921174259735,\"y\":271.0833666666292,\"index\":13,\"weight\":1,\"px\":858.8894394160269,\"py\":271.0834210531638,\"fixed\":0,\"name\":\"|cgwN\"}]",
    "data-links": "[{\"source\":0,\"target\":3,\"input\":[\"Cabbage\",\"None\"],\"id\":4},{\"source\":0,\"target\":4,\"input\":[\"Wolf\",\"None\"],\"id\":5},{\"source\":0,\"target\":6,\"input\":[\"Goat\"],\"id\":7},{\"source\":6,\"target\":0,\"input\":[\"Goat\"],\"id\":8},{\"source\":6,\"target\":7,\"input\":[\"None\"],\"id\":9},{\"source\":7,\"target\":8,\"input\":[\"Wolf\"],\"id\":11},{\"source\":8,\"target\":3,\"input\":[\"None\"],\"id\":12},{\"source\":9,\"target\":4,\"input\":[\"None\"],\"id\":13},{\"source\":7,\"target\":9,\"input\":[\"Cabbage\"],\"id\":14},{\"source\":8,\"target\":7,\"input\":[\"Wolf\"],\"id\":15},{\"source\":9,\"target\":7,\"input\":[\"Cabbage\"],\"id\":17},{\"source\":7,\"target\":6,\"input\":[\"None\"],\"id\":18},{\"source\":8,\"target\":10,\"input\":[\"Goat\"],\"id\":19},{\"source\":9,\"target\":11,\"input\":[\"Goat\"],\"id\":20},{\"source\":11,\"target\":9,\"input\":[\"Goat\"],\"id\":21},{\"source\":10,\"target\":8,\"input\":[\"Goat\"],\"id\":22},{\"source\":10,\"target\":12,\"input\":[\"Cabbage\"],\"id\":23},{\"source\":11,\"target\":12,\"input\":[\"Wolf\"],\"id\":24},{\"source\":12,\"target\":11,\"input\":[\"Wolf\"],\"id\":25},{\"source\":12,\"target\":10,\"input\":[\"Cabbage\"],\"id\":26},{\"source\":11,\"target\":13,\"input\":[\"None\"],\"id\":27},{\"source\":10,\"target\":14,\"input\":[\"None\"],\"id\":30},{\"source\":12,\"target\":15,\"input\":[\"None\"],\"id\":31},{\"source\":15,\"target\":12,\"input\":[\"None\"],\"id\":32},{\"source\":15,\"target\":16,\"input\":[\"Goat\"],\"id\":33}]",
    "data-question": "{\"type\":\"give-list\",\"lengths\":[7],\"text\":\"Modelling a system as a finite state machine can be a good way to understand it.<br>The machine below is a representation of the classic puzzle where a cabbbage, a goat, and a wolf must be transported across a river. The goat cannot be left with the cabbage and the wolf cannot be left with the goat.<br>Notation: | represents the river, with the left being the South starting side; c,g, and w represent the cabbage, the goat, and the wolf; N and S represent whether the boat is on the North or South side of the river.<br> Use the FSM to find a solution to the puzzle.\",\"alphabetType\":\"symbol\"}",
    "data-options": "{\"nodeRadius\":30,\"acceptingRadius\":26}"
  },
  {
    "filename": "satisfy-list-3-tower-of-hanoi2",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"12||\",\"x\":107,\"y\":242,\"fixed\":1,\"index\":0,\"weight\":4,\"px\":107,\"py\":242},{\"id\":3,\"accepting\":false,\"x\":234.95933273111658,\"y\":163.5395407524219,\"index\":1,\"weight\":6,\"px\":234.95959133401442,\"py\":163.54114017716176,\"fixed\":0,\"name\":\"2|1||\"},{\"id\":4,\"accepting\":false,\"x\":238.79659227991624,\"y\":313.72862727497056,\"index\":2,\"weight\":6,\"px\":238.79657982110209,\"py\":313.7275756317463,\"fixed\":0,\"name\":\"2||1\"},{\"id\":5,\"accepting\":false,\"x\":387.74770509270934,\"y\":332.425659651759,\"index\":3,\"weight\":2,\"px\":387.7467344906132,\"py\":332.4255378247001,\"fixed\":0,\"name\":\" |2|1\"},{\"id\":8,\"accepting\":false,\"x\":384.80732035673657,\"y\":172.4523971759861,\"index\":4,\"weight\":4,\"px\":384.8070097607487,\"py\":172.45203574095456,\"fixed\":0,\"name\":\"|1|2\"},{\"id\":9,\"accepting\":true,\"x\":463.01150157758264,\"y\":44.29174021743881,\"index\":5,\"weight\":2,\"px\":463.01150157758264,\"py\":44.29174021743881,\"fixed\":0,\"name\":\"||12\"}]",
    "data-links": "[{\"source\":0,\"target\":3,\"input\":[\"ab\"],\"id\":4},{\"source\":0,\"target\":4,\"input\":[\"ac\"],\"id\":5},{\"source\":3,\"target\":0,\"input\":[\"ba\"],\"id\":6},{\"source\":4,\"target\":0,\"input\":[\"ca\"],\"id\":7},{\"source\":3,\"target\":4,\"input\":[\"bc\"],\"id\":8},{\"source\":4,\"target\":3,\"input\":[\"cb\"],\"id\":9},{\"source\":4,\"target\":5,\"input\":[\"ab\"],\"id\":10},{\"source\":5,\"target\":4,\"input\":[\"ba\"],\"id\":11},{\"source\":3,\"target\":8,\"input\":[\"ac\"],\"id\":18},{\"source\":8,\"target\":3,\"input\":[\"ca\"],\"id\":19},{\"source\":8,\"target\":9,\"input\":[\"bc\"],\"id\":20},{\"source\":9,\"target\":8,\"input\":[\"cb\"],\"id\":28}]",
    "data-question": "{\"type\":\"satisfy-list\",\"acceptList\":[\"ab, ac, bc\",\"ac, ab, cb, ba, bc, ac\",\"ab, ac, ba, ac\",\"ac, ab, ca, bc, cb, ac, ba, cb, ac, bc\"],\"rejectList\":[\"ac, ab, ac\",\"ab, ac, ba, cb\"],\"text\":\"The Tower of Hanoi is a logic puzzle where the goal is to move a stack of disks from one pole to another. Only one disk may be moved at a time and a disk cannot be placed on top of a smaller disk. The FSM below is an incomplete representation of the possible moves when working with only two disks.<br>Notation: ab - move a disk from pole a to pole b. 2|1| - disk 2 is on pole a, disk 1 is on pole b and pole 3 is empty.<br> Complete the fsm so that it includes all legal moves and accepts any sequence that ends with both disks on pole c.<img class=\\\"qdiagram\\\" src=\\\"hanoi.png\\\">\",\"alphabetType\":\"symbol\"}",
    "data-options": "{\"nodeRadius\":24,\"acceptingRadius\":18}"
  },
  {
    "filename": "satisfy-regex-1",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":1,\"px\":200,\"py\":250},{\"id\":9,\"accepting\":false,\"x\":238.76165563765676,\"y\":582.6076924384029,\"index\":1,\"weight\":0,\"px\":238.76165563765687,\"py\":582.6076924384024},{\"id\":21,\"accepting\":false,\"x\":350.3624301504889,\"y\":250.02945122848965,\"index\":2,\"weight\":1,\"px\":350.36152344830526,\"py\":250.02945105089543,\"fixed\":0,\"name\":\"2\"}]",
    "data-links": "[{\"source\":0,\"target\":21,\"input\":[\"a\"],\"id\":8}]",
    "data-question": "{\"type\":\"satisfy-regex\",\"text\":\"Construct a FSM which matches the regex ‘(ab|c)*’.\",\"alphabetType\":\"char\",\"regex\":\"(ab|c)*\",\"alphabet\":[\"a\",\"b\",\"c\"]}",
    "data-options": "{}"
  },
  {
    "filename": "satisfy-regex-2",
    "data-nodes": "[{\"id\":0,\"accepting\":false,\"name\":\"1\",\"x\":200,\"y\":250,\"fixed\":1,\"index\":0,\"weight\":1,\"px\":200,\"py\":250},{\"id\":9,\"accepting\":false,\"x\":238.76165563762288,\"y\":582.6076924385384,\"index\":1,\"weight\":0,\"px\":238.761655637623,\"py\":582.6076924385379},{\"id\":21,\"accepting\":false,\"x\":350.36243015048996,\"y\":250.02945122848953,\"index\":2,\"weight\":1,\"px\":350.36243015048996,\"py\":250.02945122848953,\"fixed\":0,\"name\":\"2\"}]",
    "data-links": "[{\"source\":0,\"target\":21,\"input\":[\"a\"],\"id\":8}]",
    "data-question": "{\"type\":\"satisfy-regex\",\"text\":\"Construct a FSM which matches the regex ‘abb(abb)*’\",\"alphabetType\":\"char\",\"regex\":\"abb(abb)*\",\"alphabet\":[\"a\",\"b\"],\"minAcceptLength\":3}",
    "data-options": "{}"
  }
]