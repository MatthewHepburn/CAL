#! /bin/python3
import json
import os
import statistics
from scipy import stats
import math

_inf1IDs = None

# Extracts results from the first A|B test, which was looking at the addition of a progress bar

# Process:
    # Consider only users who viewed at least 1 question in the inf1 question set (as progress bar is only present there) and where assigned to a test group
    # Users must also have a userID of length 36 (to exclude various other ids used for testing)
    # For each user that fits these criteria, determine which group they were assigned to and how many inf1 questions they answered correctly.


def main():
    statsObj = getStats()
    users = statsObj["users"]

    totalUsers = len(users.keys())
    print("Total users:\t", totalUsers)

    # Filter out users who do not meet the inclusion criteria
    toDel = []
    for userID in users:
        if not includeUser(userID, users):
            toDel.append(userID)
    for userID in toDel:
        users.pop(userID)

    # Gather number of inf1 questions each group answered
    nCorrectByGroup = {"a": [], "b":[]}

    inf1Qs = getInf1QuestionIDs()

    includedUsers = len(users.keys())
    print("Users meeting inclusion criteria:\t", includedUsers)

    for userID in users:
        user = users[userID]
        group = user["testGroups"]["test001"]
        nCorrect = 0
        for qID in user["questionsCorrect"]:
            if qID in inf1Qs:
                nCorrect += 1
        nCorrectByGroup[group].append(nCorrect)

    nCorrectByGroup["a"].sort()
    nCorrectByGroup["b"].sort()

    aN = len(nCorrectByGroup["a"])
    bN = len(nCorrectByGroup["b"])

    print("users in group A:\t", aN)
    print("users in group B:\t", bN)

    print("Number of correctly answered questions (A):\t", nCorrectByGroup["a"], "\n")
    print("Number of correctly answered questions (B):\t", nCorrectByGroup["b"], "\n")

    aMean = statistics.mean(nCorrectByGroup["a"])
    aStdDev = statistics.stdev(nCorrectByGroup["a"], aMean)
    bMean = statistics.mean(nCorrectByGroup["b"])
    bStdDev = statistics.stdev(nCorrectByGroup["b"], bMean)

    print("mean (A):\t", aMean)
    print("mean (B):\t", bMean)

    print("standard deviation (A):\t", aStdDev)
    print("standard deviation (b):\t", bStdDev)

    variance=  math.sqrt((aStdDev * aStdDev / aN) + (bStdDev * bStdDev/bN))
    print("variance between groups:\t", variance)

    tScore = abs((aMean - bMean)/variance)
    print("tScore:\t", tScore)

    degreesOfFreedom = aN + bN - 2

    pval = stats.t.sf(tScore, degreesOfFreedom)  # single sided test
    print("p-value:\t", pval)


def includeUser(userID, users):
    # Users must have a standard UUID as generated by the tool
    if len(userID) != 36:
        return False

    # Users must be assigned to a test group
    user = users[userID]
    if "testGroups" not in user:
        return False

    if "test001" not in user["testGroups"]:
        return False

    if user["testGroups"]["test001"] not in ["a", "b"]:
        return False

    # Users must have visited at least one page in the inf1 question set
    pagesVisited = user["totalTimeOnPage"]

    found = False
    inf1Qs = getInf1QuestionIDs()
    for qID in pagesVisited:
        if qID in inf1Qs:
            found = True
            break

    if not found:
        return False


    return True


def getStats():
    with open("full_stats.json", "r") as dataFile:
        stats = json.load(dataFile)
        return stats

def getInf1QuestionIDs():
    global _inf1IDs
    if _inf1IDs is not None:
        return _inf1IDs
    else:
        IDs = []
        with open("questionlist.json", "r") as dataFile:
            questions = json.load(dataFile)
            for qID in questions:
                if questions[qID]["set"] == "inf1":
                    IDs.append(qID)
        idSet = set(IDs)
        _inf1IDs = idSet
        return idSet





if __name__ == '__main__':
    main()