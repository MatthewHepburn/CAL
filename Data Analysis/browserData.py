#! /bin/python3
import json
import os
import statistics
import math
import re


def main():
    statsObj = getStats()
    users = statsObj["users"]

    totalUsers = len(users.keys())
    print("Total users:\t", totalUsers)

    # Filter out users who do not meet the inclusion criteria
    toDel = []
    for userID in users:
        if not includeUser(userID):
            toDel.append(userID)
    for userID in toDel:
        users.pop(userID)

    platforms = {}
    oses = {}
    browsers = {}

    for userID in users:
        user = users[userID]
        browserStr = user["browser"]
        logPlatform(browserStr, platforms)
        logOs(browserStr, oses)
        logBrowser(browserStr, browsers)


    print("\n")
    pprintStats(platforms)
    pprintStats(oses)
    pprintStats(browsers)


def includeUser(userID):
    # Users must have a standard UUID as generated by the tool
    return len(userID) == 36

def logPlatform(browserStr, platforms):
    platform = browserStr.split("/")[0].strip()
    if platform in platforms:
        platforms[platform] += 1
    else:
        platforms[platform] = 1

def logOs(browserStr, oses):
    osStr = browserStr.split("/")[1].strip()
    if osStr in oses:
        oses[osStr] += 1
    else:
        oses[osStr] = 1

def logBrowser(browserStr, browsers):
    browserFull = browserStr.split("/")[2].strip()
    browser = re.sub('(\d|\.)*', "", browserFull).strip()
    if browser in browsers:
        browsers[browser] += 1
    else:
        browsers[browser] = 1


def getStats():
    with open("full_stats.json", "r") as dataFile:
        stats = json.load(dataFile)
        return stats

def pprintStats(d):
    outList = []
    for key in d:
        outList.append([d[key], key])

    outList.sort(reverse=True)

    for elem in outList:
        tabs = " " * (28 - len(elem[1]))
        print(elem[1], tabs, elem[0])

    print("\n")

if __name__ == '__main__':
    main()